import requests
import random
from pygtrie import Trie

# Define a URL do léxico e baixa o conteúdo
url = 'https://www.lexicodoportugues.com/downloads/lexporbr_alfa_txt.txt'
try:
    response = requests.get(url)
    response.raise_for_status() # Lança um erro se a requisição falhar
    lexico_text = response.text
except requests.exceptions.RequestException as e:
    print(f"Erro ao baixar o arquivo: {e}")
    exit()

# Divide o texto em uma lista de palavras
words = lexico_text.split()
total_words_in_lexico = len(words)
print(f"Total de palavras no léxico: {total_words_in_lexico}")

# Verifica se o léxico tem palavras suficientes
if total_words_in_lexico < 1000:
    print("O léxico não possui palavras suficientes para a amostra de 1000.")
    exit()

# Seleciona 1000 palavras aleatoriamente do léxico
# Usa random.sample para garantir que não haja repetições
random_words = random.sample(words, 1000)

# 1. Calcula o total de caracteres do conjunto de 1000 palavras
total_characters = sum(len(word) for word in random_words)

# --- Construção das árvores TRIE ---

# A ordem de inserção em uma Trie não altera a estrutura final,
# por isso o número de nós será o mesmo em todas as árvores.
# O experimento demonstra essa característica do algoritmo.

# Trie 1
trie1 = Trie()
for word in random_words:
    trie1[word] = True

# Embaralha as palavras para simular uma ordem de inserção diferente
random.shuffle(random_words)

# Trie 2
trie2 = Trie()
for word in random_words:
    trie2[word] = True

# Embaralha as palavras novamente
random.shuffle(random_words)

# Trie 3
trie3 = Trie()
for word in random_words:
    trie3[word] = True

# O número de nós de uma Trie pode ser obtido com len(trie)
# Ou com um percurso, mas a biblioteca já oferece essa função.
nodes_trie1 = len(trie1)
nodes_trie2 = len(trie2)
nodes_trie3 = len(trie3)

# --- Saídas ---
print("-" * 30)
print(f"Total de caracteres do conjunto de palavras: {total_characters}")
print(f"Total de nós da árvore Trie 1: {nodes_trie1}")
print(f"Total de nós da árvore Trie 2: {nodes_trie2}")
print(f"Total de nós da árvore Trie 3: {nodes_trie3}")
print("-" * 30)
print("\nNota: O número de nós é o mesmo para todas as árvores porque a estrutura de uma Trie não depende da ordem de inserção das palavras.")
