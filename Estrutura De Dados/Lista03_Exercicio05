/*
5. Considerando o registro definido na questão anterior, crie uma agenda com 5 pessoas.
O programa deverá usar um menu de opções (sub-rotinas), com as seguintes opções:
 Inserir os 5 registros.
 Pesquisar um dos 5 registros de cada vez pelo campo nome.
 Alterar campos de um registro.
 Sair do programa de cadastro.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Definição da estrutura de registro para a agenda
struct Agenda {
    char nome[50];
    char endereco[100];
    char telefone[15];
    char situacao; // 'L' - Livre, 'X' - Ocupado, '*' - Apagado
};

// Protótipos das funções
void inserirRegistros(struct Agenda agenda[], int tamanho);
void pesquisarRegistro(struct Agenda agenda[], int tamanho);
void alterarRegistro(struct Agenda agenda[], int tamanho);
void limparBuffer();

int main() {
    struct Agenda agenda[5];
    int opcao;

    printf("\n--- PROGRAMA DE CADASTRO DE AGENDA ---\n");

    do {
        printf("\n--- MENU DE OPCOES ---\n");
        printf("1. Inserir 5 registros\n");
        printf("2. Pesquisar um registro pelo nome\n");
        printf("3. Alterar campos de um registro\n");
        printf("4. Sair do programa\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);
        limparBuffer(); // Limpa o buffer após a leitura do número

        switch (opcao) {
            case 1:
                inserirRegistros(agenda, 5);
                break;
            case 2:
                pesquisarRegistro(agenda, 5);
                break;
            case 3:
                alterarRegistro(agenda, 5);
                break;
            case 4:
                printf("Saindo do programa. Ate mais!\n");
                break;
            default:
                printf("Opcao invalida. Tente novamente.\n");
        }
    } while (opcao != 4);

    return 0;
}

// Implementação das funções

// Função para limpar o buffer do teclado
void limparBuffer() {
    while (getchar() != '\n');
}

// Sub-rotina para inserir os 5 registros
void inserirRegistros(struct Agenda agenda[], int tamanho) {
    printf("\n--- INSERIR 5 REGISTROS ---\n");
    for (int i = 0; i < tamanho; i++) {
        printf("\nRegistro %d:\n", i + 1);
        printf("Nome: ");
        fgets(agenda[i].nome, sizeof(agenda[i].nome), stdin);
        agenda[i].nome[strcspn(agenda[i].nome, "\n")] = 0;

        printf("Endereco: ");
        fgets(agenda[i].endereco, sizeof(agenda[i].endereco), stdin);
        agenda[i].endereco[strcspn(agenda[i].endereco, "\n")] = 0;

        printf("Telefone: ");
        fgets(agenda[i].telefone, sizeof(agenda[i].telefone), stdin);
        agenda[i].telefone[strcspn(agenda[i].telefone, "\n")] = 0;

        agenda[i].situacao = 'L'; // Inicializa a situacao como Livre
    }
    printf("\nTodos os 5 registros foram inseridos.\n");
}

// Sub-rotina para pesquisar um registro pelo nome
void pesquisarRegistro(struct Agenda agenda[], int tamanho) {
    char nome_busca[50];
    int encontrado = 0;

    printf("\n--- PESQUISAR REGISTRO ---\n");
    printf("Digite o nome para pesquisar: ");
    fgets(nome_busca, sizeof(nome_busca), stdin);
    nome_busca[strcspn(nome_busca, "\n")] = 0;

    for (int i = 0; i < tamanho; i++) {
        if (strcmp(agenda[i].nome, nome_busca) == 0) {
            printf("\nRegistro encontrado:\n");
            printf("Nome: %s\n", agenda[i].nome);
            printf("Endereco: %s\n", agenda[i].endereco);
            printf("Telefone: %s\n", agenda[i].telefone);
            printf("Situacao: %c\n", agenda[i].situacao);
            encontrado = 1;
            break;
        }
    }

    if (!encontrado) {
        printf("Registro nao encontrado.\n");
    }
}

// Sub-rotina para alterar campos de um registro
void alterarRegistro(struct Agenda agenda[], int tamanho) {
    char nome_busca[50];
    int encontrado = 0;

    printf("\n--- ALTERAR REGISTRO ---\n");
    printf("Digite o nome do registro que deseja alterar: ");
    fgets(nome_busca, sizeof(nome_busca), stdin);
    nome_busca[strcspn(nome_busca, "\n")] = 0;

    for (int i = 0; i < tamanho; i++) {
        if (strcmp(agenda[i].nome, nome_busca) == 0) {
            encontrado = 1;
            printf("\nRegistro encontrado. Digite os novos dados:\n");
            
            printf("Novo Nome: ");
            fgets(agenda[i].nome, sizeof(agenda[i].nome), stdin);
            agenda[i].nome[strcspn(agenda[i].nome, "\n")] = 0;

            printf("Novo Endereco: ");
            fgets(agenda[i].endereco, sizeof(agenda[i].endereco), stdin);
            agenda[i].endereco[strcspn(agenda[i].endereco, "\n")] = 0;

            printf("Novo Telefone: ");
            fgets(agenda[i].telefone, sizeof(agenda[i].telefone), stdin);
            agenda[i].telefone[strcspn(agenda[i].telefone, "\n")] = 0;

            printf("Nova Situacao (L, X ou *): ");
            scanf(" %c", &agenda[i].situacao);
            limparBuffer(); // Limpa o buffer apos a leitura do char

            printf("\nRegistro alterado com sucesso!\n");
            break;
        }
    }

    if (!encontrado) {
        printf("Registro nao encontrado para alteracao.\n");
    }
}
